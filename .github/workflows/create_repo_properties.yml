name: Create Repository Properties

on:
  workflow_dispatch:
    inputs:
      target_org:
        description: 'Target GitHub organization to create properties for'
        required: false
        default: 'mcp-research' # Default from script
  push:
    paths:
      - create_repo_properties.sh
      - .github/workflows/create_repo_properties.yml

jobs:
  create_properties:
    runs-on: ubuntu-latest
    permissions:
      contents: read # For checkout action
    env:
      DEFAULT_TARGET_ORG: 'mcp-research'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install githubkit
          # Setup the project so that the src module is accessible
          pip install -e .

      - name: Create Python script to generate token
        run: |
          cat > generate_token.py << 'EOL'
          import os
          import sys
          import logging
          from src.github import get_github_client

          logging.basicConfig(level=logging.INFO)

          def get_github_token():
              app_id = os.environ.get('GH_APP_ID')
              private_key = os.environ.get('GH_APP_PRIVATE_KEY')
              target_org = os.environ.get('TARGET_ORG')
              
              if not app_id or not private_key or not target_org:
                  logging.error("Missing required environment variables: GH_APP_ID, GH_APP_PRIVATE_KEY, TARGET_ORG")
                  sys.exit(1)

              try:
                  # Get authenticated GitHub client using the app credentials
                  gh_app = get_github_client(app_id, private_key)
                  
                  # Find the installation ID for the target organization
                  installations = gh_app.apps.list_installations().json()
                  installation_id = None
                  for inst in installations:
                      if inst.account and inst.account.login.lower() == target_org.lower():
                          installation_id = inst.id
                          break

                  if not installation_id:
                      logging.error(f"GitHub App installation not found for organization: {target_org}")
                      sys.exit(1)
                      
                  # Get an access token for the installation
                  token_response = gh_app.apps.create_installation_access_token(
                      installation_id=installation_id,
                      data={
                          "repositories": ["private-mcp-security-scans"],
                          "permissions": {
                              "organization_custom_properties": "write",
                              "repository_properties": "write"
                          }
                      }
                  ).json()
                  
                  # Print only the token (to be captured by the bash script)
                  print(token_response.token)
                  return 0
                  
              except Exception as e:
                  logging.error(f"Error generating token: {e}")
                  sys.exit(1)

          if __name__ == "__main__":
              sys.exit(get_github_token())
          EOL

      - name: Generate GitHub token and run script
        env:
          GH_APP_ID: ${{ vars.GH_APP_ID }}
          GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PRIVATE_KEY }}
          TARGET_ORG: ${{ github.event.inputs.target_org || env.DEFAULT_TARGET_ORG }}
        run: |
          # Make scripts executable
          chmod +x create_repo_properties.sh
          
          # Generate token using the Python script
          echo "Generating GitHub token for organization: $TARGET_ORG"
          TOKEN=$(python generate_token.py)
          
          if [ $? -ne 0 ]; then
            echo "Failed to generate GitHub token"
            exit 1
          fi
          
          echo "Successfully generated GitHub token"
          
          # Run the repository properties creation script
          ./create_repo_properties.sh "$TARGET_ORG" "$TOKEN"