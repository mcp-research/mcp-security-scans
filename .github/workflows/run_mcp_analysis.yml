name: Analyze MCP Repositories

on:
  workflow_dispatch:
    inputs:
      target_org:
        description: 'Target GitHub organization to analyze (optional)'
        required: false
        default: 'mcp-research' # Default from script
      num_repos:
        description: 'Number of repositories to analyze (optional)'
        required: false
        default: '10' # Default for workflow runs
      verbose:
        description: 'Enable verbose logging'
        required: false
        type: boolean
        default: false

  schedule:
    - cron: '0 5 * * *' # Run every day at 5 AM UTC

  pull_request:
    branches:
      - main

  push:
    paths:
      - src/analyze.py
      - .github/workflows/run_mcp_analysis.yml

jobs:
  analyze_repos:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    runs-on: ubuntu-latest
    permissions:
      contents: read # For the checkout action
    env:
      DEFAULT_NUMBER_OF_REPOS: 500

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Use a specific Python version

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # The directory to cache
          # Create a unique key based on runner OS, Python version, and requirements.txt hash
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          # Fallback keys if the exact key is not found
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup virtual environment and install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else echo "requirements.txt not found"; exit 1; fi

      - name: Run MCP Repository Analysis Script
        env:
          GH_APP_ID: ${{ vars.GH_APP_ID }} 
          GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PRIVATE_KEY }}
          # Use the input if manually triggered, otherwise the script uses its internal default
          TARGET_ORG_INPUT: ${{ github.event.inputs.target_org }}
          NUM_REPOS_INPUT: ${{ github.event.inputs.num_repos }}
        run: |
          # Activate the virtual environment
          source venv/bin/activate
          
          TARGET_ORG_ARG=""
          # Only add the argument if the input is not empty and not the default (to let the script handle the default)
          if [[ -n "$TARGET_ORG_INPUT" && "$TARGET_ORG_INPUT" != "mcp-research" ]]; then
            TARGET_ORG_ARG="--target-org $TARGET_ORG_INPUT"
          fi

          # Determine the number of repos argument
          NUM_REPOS_ARG="--num-repos ${NUM_REPOS_INPUT:-$DEFAULT_NUMBER_OF_REPOS}"
          
          # Add verbose flag if selected
          VERBOSE_ARG=""
          if [[ "${{ github.event.inputs.verbose }}" == "true" ]]; then
            VERBOSE_ARG="--verbose"
          fi

          echo "Running analysis script with arguments: Target org: [$TARGET_ORG_ARG], Number of repos: [$NUM_REPOS_ARG], Verbose: [$VERBOSE_ARG]"
          # Run the script as a module rather than a direct script to handle the relative imports correctly
          python -m src.analyze $TARGET_ORG_ARG $NUM_REPOS_ARG $VERBOSE_ARG